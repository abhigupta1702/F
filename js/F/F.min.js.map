{"version":3,"file":"F.min.js","sources":["F.js"],"names":["global","extendThis","i","ni","objects","object","prop","arguments","length","this","makeApplier","method","apply","defineAndInheritProperties","Component","properties","constructor","descriptor","property","propertyDescriptors","propertyDescriptorHash","propertyDescriptorQueue","unshift","superConstructor","set","get","noop","superTest","test","superifyDynamic","name","func","superPrototype","previousSuper","_super","ret","superifyStatic","mixin","prototype","value","usesSuper","hasOwnProperty","PseudoClass","extend","Error","Object","defineProperties","construct","init","create","call","Array","isArray","mixins","destruct","toString","className","module","exports","define","Class","F","window","err","console","log","options","debug","_","Backbone","Events","extendView","component","view","View","ListView","events","addToSet","obj","push","makeArrays","propParts","split","curObj","forEach","part","index","EventEmitter","delegateEventSplitter","getValue","isFunction","initialize","undefined","container","el","template","render","bind","actualNodeName","$el","nodeName","toUpperCase","requiredNodeName","tagName","addClass","delegateEvents","model","setModel","rendered","off","stopListening","noRerender","on","listenTo","age","Date","getTime","remove","show","renderOnce","hide","inDebugMode","html","toJSON","$","parentNode","is","append","trigger","undelegateEvents","key","base","parts","match","eventName","selector","cid","delegate","decapitalize","str","slice","toLowerCase","singly","visible","independent","mergeOptions","components","_bubbledEvts","silent","warn","self","handleRenderComplete","teardownIfSetup","setupIfNotSetup","removeComponents","isVisible","unbind","bubble","componentName","evt","error","handler","args","unbubble","addComponent","setName","parent","_handleSubComponentShown","removeComponent","subComponent","hideAllSubComponents","currentSubComponent","hideChildren","isSetup","teardown","setup","showAllSubComponents","except","indexOf","customName","setPropsFromOptions","props","each","optionSets","proto","ModelComponent","Model","refresh","callback","fetch","success","response","handleLoadSuccess","handleLoadError","_setModel","_triggerChange","itemId","data","idAttribute","_handleLoadComplete","local","load","modelOrData","save","handleSaveSuccess","handleSaveError","id","CollectionComponent","defaultParams","_useCollection","collection","Collection","collectionLoaded","_releaseCollection","addModel","removeModel","params","clearParams","fetchParams","collectionOrData","FormView","submit","FormComponent","Template","clear","doBlur","$button","filter","last","focus","setTimeout","blur","handleSubmit","preventDefault","saveForm","extractValuesFromForm","$form","fields","serializeArray","field","setValuesFromForm","ItemView","ItemTemplate","subViews","addSubView","ListContainer","removeSubViews","removeSubView","modelOrViewIndex","viewIndex","some","tmpView","isEmpty","emptyTemplate","EmptyView","isEqual","ListEmptyTemplate","ListEmptyView","NoResultsTemplate","NoResultsView","ListComponent","ListTemplate","click li","selectedItem","getModelFromLi","listItem","getViewFromLi","handleSelect","currentTarget"],"mappings":"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","sourcesContent":["/*! F - v1.0.2 - 2015-03-30\n* https://lazd.github.com/F/\n* Copyright (c) 2015 Larry Davis <lazdnet@gmail.com>; Licensed BSD */\n/*\n\tPseudoClass - JavaScript inheritance\n\n\tConstruction:\n\t\tSetup and construction should happen in the construct() method.\n\t\tThe construct() method is automatically chained, so all construct() methods defined by superclass methods will be called first.\n\n\tInitialization:\n\t\tInitialziation that needs to happen after all construct() methods have been called should be done in the init() method.\n\t\tThe init() method is not automatically chained, so you must call this._super() if you intend to call the superclass' init method.\n\t\tinit() is not passed any arguments\n\n\tDestruction:\n\t\tTeardown and destruction should happen in the destruct() method. The destruct() method is also chained.\n\n\tMixins:\n\t\tAn array of mixins can be provided with the mixins[] property. An object or the prototype of a class should be provided, not a constructor.\n\t\tMixins can be added at any time by calling this.mixin(properties)\n\n\tUsage:\n\t\tvar MyClass = Class(properties);\n\t\tvar MyClass = new Class(properties);\n\t\tvar MyClass = Class.extend(properties);\n\n\tCredits:\n\t\tInspired by Simple JavaScript Inheritance by John Resig http://ejohn.org/\n\n\tUsage differences:\n\t\tconstruct() is used to setup instances and is chained so superclass construct() methods run automatically\n\t\tdestruct() is used to tear down instances. destruct() is also chained\n\t\tinit(), if defined, is called after construction is complete and is not chained\n\t\ttoString() can be defined as a string or a function\n\t\tmixin() is provided to mix properties into an instance\n\t\tproperties.mixins as an array results in each of the provided objects being mixed in (last object wins)\n\t\tthis._super() is supported in mixins\n\t\tproperties, if defined, should be a hash of property descriptors as accepted by Object.defineProperties\n*/\n(function(global) {\n\t// Extend the current context by the passed objects\n\tfunction extendThis() {\n\t\tvar i, ni, objects, object, prop;\n\t\tobjects = arguments;\n\t\tfor (i = 0, ni = objects.length; i < ni; i++) {\n\t\t\tobject = objects[i];\n\t\t\tfor (prop in object) {\n\t\t\t\tthis[prop] = object[prop];\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t// Return a function that calls the specified method, passing arguments\n\tfunction makeApplier(method) {\n\t\treturn function() {\n\t\t\treturn this[method].apply(this, arguments);\n\t\t};\n\t}\n\n\t// Merge and define properties\n\tfunction defineAndInheritProperties(Component, properties) {\n\t\tvar constructor,\n\t\t\tdescriptor,\n\t\t\tproperty,\n\t\t\tpropertyDescriptors,\n\t\t\tpropertyDescriptorHash,\n\t\t\tpropertyDescriptorQueue;\n\n\t\t// Set properties\n\t\tComponent.properties = properties;\n\n\t\t// Traverse the chain of constructors and gather all property descriptors\n\t\t// Build a queue of property descriptors for combination\n\t\tpropertyDescriptorHash = {};\n\t\tconstructor = Component;\n\t\tdo {\n\t\t\tif (constructor.properties) {\n\t\t\t\tfor (property in constructor.properties) {\n\t\t\t\t\tpropertyDescriptorQueue = propertyDescriptorHash[property] || (propertyDescriptorHash[property] = []);\n\t\t\t\t\tpropertyDescriptorQueue.unshift(constructor.properties[property]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconstructor = constructor.superConstructor;\n\t\t}\n\t\twhile (constructor);\n\n\t\t// Combine property descriptors, allowing overriding of individual properties\n\t\tpropertyDescriptors = {};\n\t\tfor (property in propertyDescriptorHash) {\n\t\t\tdescriptor = propertyDescriptors[property] = extendThis.apply({}, propertyDescriptorHash[property]);\n\n\t\t\t// Allow setters to be strings\n\t\t\t// An additional wrapping function is used to allow monkey-patching\n\t\t\t// apply is used to handle cases where the setter is called directly\n\t\t\tif (typeof descriptor.set === 'string') {\n\t\t\t\tdescriptor.set = makeApplier(descriptor.set);\n\t\t\t}\n\t\t\tif (typeof descriptor.get === 'string') {\n\t\t\t\tdescriptor.get = makeApplier(descriptor.get);\n\t\t\t}\n\t\t}\n\n\t\t// Store option descriptors on the constructor\n\t\tComponent.properties = propertyDescriptors;\n\t}\n\n\t// Used for default initialization methods\n\tvar noop = function() {};\n\n\t// Given a function, the superTest RE will match if _super is used in the function\n\t// The function will be serialized, then the serialized string will be searched for _super\n\t// If the environment isn't capable of function serialization, make it so superTest.test always returns true\n\tvar superTest = /xyz/.test(function(){return 'xyz';}) ? /\\._super\\b/ : { test: function() { return true; } };\n\n\t// Bind an overriding method such that it gets the overridden method as its first argument\n\tvar superifyDynamic = function(name, func, superPrototype) {\n\t\treturn function PseudoClass_setStaticSuper() {\n\t\t\t// Store the old super\n\t\t\tvar previousSuper = this._super;\n\n\t\t\t// Use the method from the superclass' prototype\n\t\t\t// This strategy allows monkey patching (modification of superclass prototypes)\n\t\t\tthis._super = superPrototype[name];\n\n\t\t\t// Call the actual function\n\t\t\tvar ret = func.apply(this, arguments);\n\n\t\t\t// Restore the previous value of super\n\t\t\t// This is required so that calls to methods that use _super within methods that use _super work\n\t\t\tthis._super = previousSuper;\n\n\t\t\treturn ret;\n\t\t};\n\t};\n\n\tvar superifyStatic = function(name, func, object) {\n\t\t// Store a reference to the overridden function\n\t\tvar _super = object[name];\n\n\t\treturn function PseudoClass_setDynamicSuper() {\n\t\t\t// Use the method stored at declaration time\n\t\t\tthis._super = _super;\n\n\t\t\t// Call the actual function\n\t\t\treturn func.apply(this, arguments);\n\t\t};\n\t};\n\n\t// Mix the provided properties into the current context with the ability to call overridden methods with _super()\n\tvar mixin = function(properties, superPrototype) {\n\t\t// Use this instance's prototype if no prototype provided\n\t\tsuperPrototype = superPrototype || this.constructor && this.constructor.prototype;\n\t\t\n\t\t// Copy the properties onto the new prototype\n\t\tfor (var name in properties) {\n\t\t\tvar value = properties[name];\n\n\t\t\t// Never mix construct or destruct\n\t\t\tif (name === 'construct' || name === 'destruct')\n\t\t\t\tcontinue;\n\n\t\t\t// Check if the property if a method that makes use of _super:\n\t\t\t// 1. The value should be a function\n\t\t\t// 2. The super prototype should have a function by the same name\n\t\t\t// 3. The function should use this._super somewhere\n\t\t\tvar usesSuper = superPrototype && typeof value === 'function' && typeof superPrototype[name] === 'function' && superTest.test(value);\n\n\t\t\tif (usesSuper) {\n\t\t\t\t// Wrap the function such that this._super will be available\n\t\t\t\tif (this.hasOwnProperty(name)) {\n\t\t\t\t\t// Properties that exist directly on the object should be superified statically\n\t\t\t\t\tthis[name] = superifyStatic(name, value, this);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Properties that are part of the superPrototype should be superified dynamically\n\t\t\t\t\tthis[name] = superifyDynamic(name, value, superPrototype);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Directly assign the property\n\t\t\t\tthis[name] = value;\n\t\t\t}\n\t\t}\n\t};\n\n\t// The base Class implementation acts as extend alias, with the exception that it can take properties.extend as the Class to extend\n\tvar PseudoClass = function(properties) {\n\t\t// If a class-like object is passed as properties.extend, just call extend on it\n\t\tif (properties && properties.extend)\n\t\t\treturn properties.extend.extend(properties);\n\n\t\t// Otherwise, just create a new class with the passed properties\n\t\treturn PseudoClass.extend(properties);\n\t};\n\t\n\t// Add the mixin method to all classes created with PseudoClass\n\tPseudoClass.prototype.mixin = mixin;\n\t\n\t// Creates a new PseudoClass that inherits from this class\n\t// Give the function a name so it can refer to itself without arguments.callee\n\tPseudoClass.extend = function extend(properties) {\n\t\t// The constructor handles creating an instance of the class, applying mixins, and calling construct() and init() methods\n\t\tfunction PseudoClass() {\n\t\t\t// Optimization: Requiring the new keyword and avoiding usage of Object.create() increases performance by 5x\n\t\t\tif (this instanceof PseudoClass === false) {\n\t\t\t\tthrow new Error('Cannot create instance without new operator');\n\t\t\t}\n\n\t\t\t// Set properties\n\t\t\tvar propertyDescriptors = PseudoClass.properties;\n\t\t\tif (propertyDescriptors) {\n\t\t\t\tObject.defineProperties(this, propertyDescriptors);\n\t\t\t}\n\n\t\t\t// Optimization: Avoiding conditionals in constructor increases performance of instantiation by 2x\n\t\t\tthis.construct.apply(this, arguments);\n\n\t\t\tthis.init();\n\t\t}\n\n\t\tvar superConstructor = this;\n\t\tvar superPrototype = this.prototype;\n\n\t\t// Store the superConstructor\n\t\t// It will be accessible on an instance as follows:\n\t\t//\tinstance.constructor.superConstructor\n\t\tPseudoClass.superConstructor = superConstructor;\n\n\t\t// Add extend() as a static method on the constructor\n\t\tPseudoClass.extend = extend;\n\n\t\t// Create an object with the prototype of the superclass\n\t\t// Store the extended class' prototype as the prototype of the constructor\n\t\tvar prototype = PseudoClass.prototype = Object.create(superPrototype);\n\n\t\t// Assign prototype.constructor to the constructor itself\n\t\t// This allows instances to refer to this.constructor.prototype\n\t\t// This also allows creation of new instances using instance.constructor()\n\t\tprototype.constructor = PseudoClass;\n\n\t\t// Store the superPrototype\n\t\t// It will be accessible on an instance as follows:\n\t\t//\tinstance.superPrototype\n\t\t//\tinstance.constructor.prototype.superPrototype\n\t\tprototype.superPrototype = superPrototype;\n\n\t\tif (properties) {\n\t\t\t// Set property descriptors aside\n\t\t\t// We'll first inherit methods, then we'll apply these\n\t\t\tvar propertyDescriptors = properties.properties;\n\t\t\tdelete properties.properties;\n\n\t\t\t// Mix the new properties into the class prototype\n\t\t\t// This does not copy construct and destruct\n\t\t\tmixin.call(prototype, properties, superPrototype);\n\n\t\t\t// Mix in all the mixins\n\t\t\t// This also does not copy construct and destruct\n\t\t\tif (Array.isArray(properties.mixins)) {\n\t\t\t\tfor (var i = 0, ni = properties.mixins.length; i < ni; i++) {\n\t\t\t\t\t// Mixins should be _super enabled, with the methods defined in the prototype as the superclass methods\n\t\t\t\t\tmixin.call(prototype, properties.mixins[i], prototype);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Define properties from this class and its parent classes\n\t\t\tdefineAndInheritProperties(PseudoClass, propertyDescriptors);\n\n\t\t\t// Chain the construct() method (supermost executes first) if necessary\n\t\t\tif (properties.construct) {\n\t\t\t\tvar construct = properties.construct;\n\t\t\t\tif (superPrototype.construct) {\n\t\t\t\t\tprototype.construct = function() {\n\t\t\t\t\t\tsuperPrototype.construct.apply(this, arguments);\n\t\t\t\t\t\tconstruct.apply(this, arguments);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprototype.construct = construct;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Chain the destruct() method in reverse order (supermost executes last) if necessary\n\t\t\tif (properties.destruct) {\n\t\t\t\tvar destruct = properties.destruct;\n\t\t\t\tif (superPrototype.destruct) {\n\t\t\t\t\tprototype.destruct = function() {\n\t\t\t\t\t\tdestruct.apply(this, arguments);\n\t\t\t\t\t\tsuperPrototype.destruct.apply(this, arguments);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprototype.destruct = destruct;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Allow definition of toString as a string (turn it into a function)\n\t\t\tif (typeof properties.toString === 'string') {\n\t\t\t\tvar className = properties.toString;\n\t\t\t\tprototype.toString = function() { return className; };\n\t\t\t}\n\t\t}\n\n\t\t// Define construct and init as noops if undefined\n\t\t// This serves to avoid conditionals inside of the constructor\n\t\tif (typeof prototype.construct !== 'function')\n\t\t\tprototype.construct = noop;\n\t\tif (typeof prototype.init !== 'function')\n\t\t\tprototype.init = noop;\n\n\t\treturn PseudoClass;\n\t};\n\t\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\t// Node.js Support\n\t\tmodule.exports = PseudoClass;\n\t}\n\telse if (typeof global.define === 'function') {\n\t\t(function(define) {\n\t\t\t// AMD Support\n\t\t\tdefine(function() { return PseudoClass; });\n\t\t}(global.define));\n\t}\n\telse {\n\t\t// Browser support\n\t\tglobal.PseudoClass = PseudoClass;\n\n\t\t// Don't blow away existing Class variable\n\t\tif (!global.Class) {\n\t\t\tglobal.Class = PseudoClass;\n\t\t}\n\t}\n}(this));\n\n/** \n\tThe main F namespace.\n\t\n\t@namespace\n\t\n\t@property {Object}\toptions\t\t\t\t\t\t\tOptions for all F components.\n\t@param {Boolean}\toptions.debug\t\t\t\t\tIf true, show debug messages for all components.\n*/\nvar F = F || {};\n\ntry {\n\twindow['ƒ'] = F;\n}\ncatch (err) {\n\tconsole.log(\"ƒ: could not set ƒ variable\");\n}\n\nF.options = {\n\tdebug: false\n};\n\n// Let F be a global event hub\n _.extend(F, Backbone.Events);\n\n/**\n\tExtend the view of the provided component with a deep copy of the events property\n\t\n\t@param {Object}\t\tcomponent\tComponent whose view should be extended\n\t@param {String}\t\tproperties\tProperties to mix in to resulting view\n\t\n\t@todo add pushToArray option to always push to an array\n\t\n\t@returns {F.Component}\tthis, chainable\n*/\nF.extendView = function(component, properties) {\n\tvar view = component.prototype.View || component.prototype.ListView;\n\tif (view) {\n\t\tproperties.events = _.extend({}, view.prototype.events, properties.events);\n\t\treturn view.extend(properties);\n\t}\n};\n\n/**\n\tAdd a value to a property that should become an array when and only when collisions occurr\n\t\n\t@param {Object}\t\tobject\tObject to set the property on\n\t@param {String}\t\tprop\tProprety to set\n\t@param {Mixed}\t\tValue\tValue to set\n\t\n\t@todo add pushToArray option to always push to an array\n*/\nF.addToSet = function(obj, prop, value) {\n\tif (typeof obj[prop] !== 'undefined') {\n\t\t// Turn it into an array\n\t\tif (!_.isArray(obj[prop]))\n\t\t\tobj[prop] = [obj[prop]];\n\t\t\n\t\t// Push the new value\n\t\tobj[prop].push(value);\n\t}\n\telse {\n\t\t// Directly set the value if there is only one\n\t\tobj[prop] = value;\n\t}\n};\n\n/**\n\tSet a property of an object using dot notiation\n\t\n\t@param {Object}\t\tobject\t\tOptional object to set the property on. A new object will be created if no object was passed.\n\t@param {String}\t\tprop\t\tProprety to set\n\t@param {Value}\t\tprop\t\tThe new value\n\t@param {Boolean}\tmakeArrays\tUse F.addToSet on the property to \n\t\n\t@todo add push option to always push to an array\n\t\n\t@returns {Object}\tObject the property was set on or the created object\n*/\nF.set = function(obj, prop, value, makeArrays) {\n\tif (!obj) obj = {};\n\t\n\tvar propParts = prop.split('.');\n\t\n\tif (propParts.length > 1) {\n\t\tvar curObj = obj;\n\t\tpropParts.forEach(function(part, index) {\n\t\t\tif (index === propParts.length-1) { // Set the value if we've reached the end of the chain\n\t\t\t\tif (makeArrays)\n\t\t\t\t\tF.addToSet(curObj, part, value);\n\t\t\t\telse \n\t\t\t\t\tcurObj[part] = value;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (typeof curObj[part] === 'undefined') // Define the part if it's not defined\n\t\t\t\t\tcurObj[part] = {};\n\t\t\t\t\n\t\t\t\tcurObj = curObj[part]; // Drill inward\n\t\t\t}\n\t\t});\n\t}\n\telse {\n\t\tif (makeArrays)\n\t\t\tF.addToSet(obj, prop, value);\n\t\telse \n\t\t\tobj[prop] = value;\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Provides observer pattern for basic eventing. Directly uses <a href=\"http://backbonejs.org/#Events\">Backbone.Events</a>\n *\n * @class\n */\nF.EventEmitter = new PseudoClass(\n\tBackbone.Events\n\n\t/**\n\t\tBind one or more space separated events, or an events map,\n\t\tto a <code>callback</code> function. Passing <code>\"all\"</code> will bind the callback to\n\t\tall events fired.\n\t\n\t\t@name on\n\t\t@memberOf F.EventEmitter.prototype\n\t\t@function\n\n\t\t@param {String}\t\tevent\t\tEvent to listen to\n\t\t@param {Function}\tcallback\tCallback to execute when the event is triggered\n\t\t@param {Object}\t\t[context]\tThe value of <code>this</code> when the callback runs\n\t*/\n\t\n\t/**\n\t\tBind events to only be triggered a single time. After the first time\n\t\tthe callback is invoked, it will be removed.\n\t\t\n\t\t@name once\n\t\t@memberOf F.EventEmitter.prototype\n\t\t@function\n\n\t\t@param {String}\t\tevent\t\tName of the event to listen to\n\t\t@param {Function}\tcallback\tCallback to execute when the event is triggered\n\t\t@param {Object}\t\t[context]\tThe value of <code>this</code> when the callback runs\n\t*/\n\t\n\t/**\n\t\tRemove one or many callbacks. If <code>context</code> is null, removes all\n\t\tcallbacks with that function. If <code>callback</code> is null, removes all\n\t\tcallbacks for the event. If <code>events</code> is null, removes all bound\n\t\tcallbacks for all events.\n\t\t\n\t\t@name off\n\t\t@memberOf F.EventEmitter.prototype\n\t\t@function\n\n\t\t@param {String}\t\t[event]\t\tName of the event that is being listened to\n\t\t@param {Function}\t[callback]\tCallback to remove\n\t\t@param {Object}\t\t[context]\tRemove callbacks with the specified context\n\t*/\n\t\n\t/**\n\t\tTrigger one or many events, firing all bound callbacks. Callbacks are\n\t\tpassed the same arguments as <code>trigger</code> is, apart from the event name\n\t\t(unless you're listening on <code>\"all\"</code>, which will cause your callback to\n\t\treceive the true name of the event as the first argument).\n\t\t\n\t\t@name trigger\n\t\t@memberOf F.EventEmitter.prototype\n\t\t@function\n\n\t\t@param {String}\t\tevent\t\tName of the event to trigger\n\t\t@param {...Mixed}\t[args]\t\tArguments to pass to callback functions\n\t*/\n\t\n\t/**\n\t\tAn inversion-of-control version of <code>on</code>. Tell <b>this</b> object to listen to\n\t\tan event in another object keeping track of what it's listening to.\n\t\t\n\t\t@name listenTo\n\t\t@memberOf F.EventEmitter.prototype\n\t\t@function\n\n\t\t@param {Object}\t\tother\t\tThe object to listen to\n\t\t@param {String}\t\tevent\t\tName of the event to listen to\n\t\t@param {Function}\tcallback\tCallback to execute when the event is triggered\n\t*/\n\n\t/**\n\t\tTell this object to stop listening to either specific events or\n\t\tto every object it's currently listening to.\n\t\n\t\t@name stopListening\n\t\t@memberOf F.EventEmitter.prototype\n\t\t@function\n\n\t\t@param {Object}\t\t[other]\t\tThe object that is being listened to\n\t\t@param {String}\t\t[event]\t\tName of the event that is being listened to\n\t\t@param {Function}\t[callback]\tCallback to remove\n\t*/\n);\n(function() {\n\t// A couple functions required to override delegateEvents\n\tvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\tvar getValue = function(object, prop) {\n\t\tif (!(object && object[prop])) return null;\n\t\treturn _.isFunction(object[prop]) ? object[prop]() : object[prop];\n\t};\n\t\n\tF.View = Backbone.View.extend(/** @lends F.View# */{\n\t\t/**\n\t\t\tGeneric view class. Provides rendering and templating based on a model, eventing based on a component, and element management based on a container or existing element\n\t\t\t\n\t\t\t@constructs\n\t\t\t\n\t\t\t@param {Object}\t\t\toptions\t\t\t\tOptions for this view\n\t\t\t@param {Template}\t\toptions.template\tThe template to render this view with\n\t\t\t@param {Element}\t\t[options.el]\t\tThe DOM element, jQuery selector, or jQuery object to render this view to. Should not be used with options.container\n\t\t\t@param {Element}\t\t[options.container]\tThe DOM element, jQuery selector, or jQuery object to insert this components element into. Should not be used with options.el\n\t\t\t@param {Backbone.Model}\t[options.model]\t\tInstance of a Backbone model to render this view from\n\t\t\t@param {Component}\t\t[options.component]\tThe component that events should be delegated to\n\t\t\t@param {Object}\t\t\t[options.events]\tBackbone events object indicating events to listen for on this view\n\t\t\t\n\t\t\t@property {Template} template\t\tThe template to render this view with\n\t\t*/\n\t\tinitialize: function(options) {\n\t\t\t// Attach options as this.options, Backbone 1.1 removes this\n\t\t\tthis.options = options;\n\n\t\t\tif (this.options.container !== undefined && this.options.el !== undefined) {\n\t\t\t\tthrow new Error('View: should provide either options.el or options.container, never both');\n\t\t\t}\n\t\t\t\n\t\t\tvar template = this.template = this.options.template || this.template;\n\t\t\t\n\t\t\t// Always call in our scope so parents can remove change listeners on models by referencing view.render\n\t\t\tthis.render = this.render.bind(this);\n\t\t\t\n\t\t\tif (this.options.el) {\n\t\t\t\t// Make sure the element is of the right tag\n\t\t\t\tvar actualNodeName = this.$el[0].nodeName.toUpperCase();\n\t\t\t\tvar requiredNodeName =  this.tagName.toUpperCase();\n\t\t\t\t\n\t\t\t\t// TBD: Revisit this check later; must be a better way to allow any node\n\t\t\t\tif (this.tagName !== 'div' && actualNodeName !== requiredNodeName) {\n\t\t\t\t\tthrow new Error('View: cannot create view, incorrect tag provided. Expected '+requiredNodeName+', but got '+actualNodeName);\n\t\t\t\t}\n\t\t\t\n\t\t\t\t// Add the CSS class if it doesn't have it\n\t\t\t\tthis.$el.addClass(this.className);\n\t\t\t}\n\t\t\t\n\t\t\t// Store container, if provided\n\t\t\tthis.container = this.options.container;\n\t\t\t\n\t\t\t// Store the controlling component\n\t\t\tthis.component = this.options.component;\n\t\t\t\n\t\t\t// Add events\n\t\t\tif (this.options.events)\n\t\t\t\tthis.delegateEvents(this.options.events);\n\n\t\t\t// Store the model\n\t\t\tif (this.options.model)\n\t\t\t\tthis.setModel(this.options.model);\n\t\t\t\n\t\t\tthis.rendered = null;\n\t\t},\n\t\t\n\t\tsetModel: function(model) {\n\t\t\t// Unsubscribe from old model's change and render event in case view.remove() was not called\n\t\t\tif (this.model && this.model.off)\n\t\t\t\tthis.stopListening(this.model);\n\t\t\t\n\t\t\tthis.model = model;\n\t\t\t\n\t\t\t// Either the view or the component can have noRerender\n\t\t\tvar noRerender = this.options.noRerender || (this.options.component && this.options.component.options.noRerender);\n\t\t\t\n\t\t\t// Add change listeners to the model, but only if has an on method\n\t\t\tif (this.model && this.model.on && !noRerender)\n\t\t\t\tthis.listenTo(this.model, 'change', this.render);\n\t\t\t\n\t\t\tthis.rendered = null;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tGet the time since the view was last rendered\n\t\t\t\n\t\t\t@returns {number} Number of milliseconds since this view was rendered\n\t\t*/\n\t\tage: function() {\n\t\t\treturn this.rendered !== null ? new Date().getTime() - this.rendered : -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tRemove this view from the DOM and stop listening to model change events\n\t\t*/\n\t\tremove: function() {\n\t\t\tthis.$el.remove();\n\t\t\n\t\t\t// Remove change listeners\n\t\t\tif (this.model && this.model.off)\n\t\t\t\tthis.stopListening();\n\t\t},\n\t\t\n\t\t/**\n\t\t\tShow the view. The view will be rendered before it is shown if it hasn't already been rendered\n\t\t\t\n\t\t\t@returns {F.View}\tthis, chainable\n\t\t*/\n\t\tshow: function() {\n\t\t\t// Ensure the view is rendered\n\t\t\tif (this.template) {\n\t\t\t\tthis.renderOnce();\n\t\t\t}\n\t\t\t\n\t\t\t// Show the view\n\t\t\tthis.$el.show();\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\n\t\t/**\n\t\t\tHide the view\n\t\t\t\n\t\t\t@returns {F.View}\tthis, chainable\n\t\t*/\n\t\thide: function() {\n\t\t\t// Hide the view\n\t\t\tthis.$el.hide();\n\t\t\n\t\t\treturn this;\n\t\t},\n\t\n\t\t/**\n\t\t\tRender the view only if it has not been rendered before (or has been reset)\n\t\t\t\n\t\t\t@returns {F.View}\tthis, chainable\n\t\t*/\n\t\trenderOnce: function() {\n\t\t\t// Only render the view if it has never been rendered\n\t\t\tif (this.rendered === null) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\n\t\t\treturn this;\n\t\t},\n\n\t\tinDebugMode: function() {\n\t\t\t// Check if the component or F itself is in debug mode\n\t\t\treturn F.options.debug || (this.component && this.component.options.debug); \n\t\t},\n\n\t\t/**\n\t\t\tRender the view\n\t\t\t\n\t\t\t@returns {F.View}\tthis, chainable\n\t\t*/\n\t\trender: function() {\n\t\t\tif (this.inDebugMode()) {\n\t\t\t\tconsole.log('%s: Rendering view...', this.component && this.component.toString() || 'Orphaned view');\n\t\t\t}\n\t\t\t\n\t\t\t// Render template\n\t\t\tif (this.template) {\n\t\t\t\t// Use this view's model, or the model of the component it's part of\n\t\t\t\tvar model = this.model || (this.component && this.component.model);\n\t\t\t\t\n\t\t\t\t// First, see if the model exists. If so, see if it has toJSON. If so, use model.toJSON. Otherwise, if model exists, use model. Otherwise, use {}\n\t\t\t\tthis.$el.html(this.template(model && model.toJSON && model.toJSON() || model || {}));\n\t\t\t}\n\t\t\t\n\t\t\t// Add to container, if not already there\n\t\t\tif (this.container && !$(this.el.parentNode).is(this.container)) {\n\t\t\t\t$(this.container).append(this.el);\n\t\t\t}\n\t\t\n\t\t\t// Store the last time this view was rendered\n\t\t\tthis.rendered = new Date().getTime();\n\t\t\t\n\t\t\t// Notify render has completed\n\t\t\tthis.trigger('renderComplete');\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tDelegate events to this view. This overrides Backbone.View.delegateEvents and lets us specify an object to call methods on instead of the view\n\t\t\t\n\t\t\t@param {Object}\tevents\tEvents hash to delegate\n\t\t\t\n\t\t\t@returns {F.View}\tthis, chainable\n\t\t*/\n\t\tdelegateEvents: function(events) {\n\t\t\tif (!(events || (events = getValue(this, 'events')))) return;\n\t\t\tthis.undelegateEvents();\n\t\t\tfor (var key in events) {\n\t\t\t\tvar method = events[key];\n\t\t\t\t\n\t\t\t\tvar base = this.component;\n\t\t\t\t\t\t\n\t\t\t\tif (!_.isFunction(method)) {\n\t\t\t\t\tif (this.component) {\n\t\t\t\t\t\tvar parts = events[key].split('.');\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (parts.length > 1) {\n\t\t\t\t\t\t\tmethod = this.component;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor (var i = 0; i < parts.length; i++) {\n\t\t\t\t\t\t\t\tvar part = parts[i];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// console.log('Looking for part ', part, 'in ', method);\n\t\t\t\t\t\t\t\tbase = method;\n\t\t\t\t\t\t\t\tmethod = method[part];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (!method) {\n\t\t\t\t\t\t\t\t\t// console.warn('Could not find method %s', key);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmethod = this.component[events[key]];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmethod = this[events[key]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!method) throw new Error('Method \"' + events[key] + '\" does not exist');\n\t\t\t\t\n\t\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\t\tvar eventName = match[1], selector = match[2];\n\n\t\t\t\t// Execute in the scope of the base\n\t\t\t\t// TBD: determine if we ought to execute in the scope of the view itself ever?\n\t\t\t\t//\t\tor leave that up to implementors to pass a bound function\n\t\t\t\tmethod = this.component ? _.bind(method, base) : _.bind(method, this);\n\t\t\t\t\n\t\t\t\teventName += '.delegateEvents' + this.cid;\n\t\t\t\tif (selector === '') {\n\t\t\t\t\tthis.$el.bind(eventName, method);\n\t\t\t\t} else {\n\t\t\t\t\tthis.$el.delegate(selector, eventName, method);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t});\n}());\n\n(function() {\n\tfunction decapitalize(str) {\n\t\treturn str.slice(0, 1).toLowerCase()+str.slice(1);\t\n\t}\n\t\n\tF.Component = new PseudoClass(/** @lends F.Component# */{\n\t\ttoString: 'Component',\n\t\textend: F.EventEmitter,\n\t\t\n\t\toptions: {\n\t\t\tsingly: false,\t\t// If true, show only one subcomponent at a time\n\t\t\tvisible: false,\t\t// If true, this component is visible immediately\n\t\t\tdebug: false,\t\t// If true, enable debug mode for this component\n\t\t\tindependent: false\t// If true, parent component is never notified when shown\n\t\t},\n\t\t\n\t\t/**\n\t\t\tGeneric component class\n\t\t\t\n\t\t\t@extends F.EventEmitter\n\t\t\t@constructs\n\t\t\t\n\t\t\t@param {Object}\t\t[options]\t\t\t\t\tComponent options\n\t\t\t@param {Boolean}\t[options.singly=false]\t\tWhether this component will allow multiple sub-components to be visible at once. If true, only one component will be visible at a time.\n\t\t\t@param {Boolean}\t[options.visible=false]\t\tIf true, this component will be visible immediately.\n\t\t\t@param {Boolean}\t[options.debug=false]\t\tIf true, show debug messages for this component.\n\t\t\t@param {Boolean}\t[options.independent=false]\tIf true, the parent component will never be notified that this component has been shown. Useful for children of singly components that should not cause their siblings to be hidden when they are shown\n\t\t\t\n\t\t\t@property {Object}\toptions\t\t\tDefault options for this component. These will be merged with options passed to the constructor.\n\t\t*/\n\t\tconstruct: function(options) {\n\t\t\t// Merge options up the prototype chain, with passed options overriding\n\t\t\tthis.mergeOptions(options);\n\n\t\t\t// Sub components\n\t\t\tthis.components = {};\n\t\t\t\n\t\t\t// Hold the bubbled event listeners\n\t\t\tthis._bubbledEvts = {};\n\t\t\t\n\t\t\t// Make sure the following functions are always called in scope\n\t\t\t// They are used in event handlers, and we want to be able to remove them\n\t\t\tthis.bind('_handleSubComponentShown');\n\t\t\tthis.bind('render');\n\t\t},\n\t\t\n\t\t/**\n\t\t\tPerforms initialization operations after all constructors have been called\n\t\t*/\n\t\tinit: function() {\n\t\t\t// Hide view by default\n\t\t\tif (this.view) {\n\t\t\t\tif (this.view.el) {\n\t\t\t\t\tif (this.options.visible === true) {\n\t\t\t\t\t\t// Call show method so view is rendered\n\t\t\t\t\t\tthis.show({ silent: true });\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Just hide the el\n\t\t\t\t\t\tthis.view.$el.hide();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.warn('Component %s has a view without an element', this.toString, this, this.view, this.view.options);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\tthis.listenTo(this.view, 'renderComplete', function() {\n\t\t\t\t\tif (typeof this.handleRenderComplete === 'function')\n\t\t\t\t\t\tthis.handleRenderComplete();\n\n\t\t\t\t\t// When the view re-renders, tell the component to teardown and setup again\n\t\t\t\t\tthis.teardownIfSetup();\n\t\t\t\t\tthis.setupIfNotSetup();\n\n\t\t\t\t\tself.trigger('view:rendered', {\n\t\t\t\t\t\tcomponent: self,\n\t\t\t\t\t\tview: self.view\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t\tPerform setup operations before this component is shown for the first time, such as adding sub-components\n\t\t\t\n\t\t\t@name setup\n\t\t\t@memberOf F.Component.prototype\n\t\t\t@function\n\t\t*/\n\n\t\t/**\n\t\t\tPerform tear-down operations after this component is hidden, such as removing sub-components. This method will not be called unless the setup() method is defined and the component has been shown previously\n\t\t\t\n\t\t\t@name teardown\n\t\t\t@memberOf F.Component.prototype\n\t\t\t@function\n\t\t*/\n\t\t\n\t\t/**\n\t\t\tDestroy this instance and free associated memory\n\t\t*/\n\t\tdestruct: function() {\n\t\t\t// If this module has a view in this.view, destroy it automatically\n\t\t\tif (this.view)\n\t\t\t\tthis.view.remove();\n\t\t\t\n\t\t\tthis.teardownIfSetup();\n\n\t\t\t// Destroy sub-components\n\t\t\tthis.removeComponents();\n\t\t\t\n\t\t\t// Stop listening, we're done\n\t\t\tthis.stopListening();\n\t\t\n\t\t\t// Clear references to components\n\t\t\tdelete this.components;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tRender the view associated with this component, if it has one\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\trender: function() {\n\t\t\tif (this.view) {\n\t\t\t\tthis.view.render();\n\t\t\t}\n\t\t\t\n\t\t\t// Hide our element after render if we're not visible\n\t\t\tif (!this.isVisible())\n\t\t\t\tthis.view.$el.hide();\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t\tBinds a method to the execution scope of this instance\n\t\t\t\n\t\t\t@name bind\n\t\t\t@memberOf F.Component.prototype\n\t\t\t@function\n\t\t\t\n\t\t\t@param {String}\t\tname\t\tThe name of the method to bind. For example, to bind <code>this.handleClick</code>, you would use <code>this.bind('handleClick')</code>\n\t\t*/\n\t\tbind: function(name) {\n\t\t\tif (typeof this[name] === 'function')\n\t\t\t\tthis[name] = this[name].bind(this);\n\t\t},\n\n\t\t/**\n\t\t\tDestroy the unbind function\n\t\t\t@ignore\n\t\t*/\n\t\tunbind: undefined,\n\t\n\t\t/**\n\t\t\tSet an event to bubble up the component chain by re-triggering it when the given sub-component triggers it\n\t\t\t\n\t\t\t@param {String}\t\tcomponentName\tName of the component whose event to bubble\n\t\t\t@param {String}\t\tevt\t\t\t\tName of event to bubble up\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\tbubble: function(componentName, evt) {\n\t\t\tif (!this[componentName]) {\n\t\t\t\tconsole.error(\"%s: cannot set event '%s' for bubbling from component '%s', component does not exist\", this.toString(), evt, componentName);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\t\n\t\t\tif (!this._bubbledEvts[componentName])\n\t\t\t\tthis._bubbledEvts[componentName] = {};\n\t\t\t\n\t\t\t// Create a handler\n\t\t\tvar handler = this._bubbledEvts[componentName][evt] = function() {\n\t\t\t\t// Turn the event arguments into an array\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\t\n\t\t\t\t// Add the name of the event to the arguments array\n\t\t\t\targs.unshift(evt);\n\t\t\t\t\n\t\t\t\t// Call to bubble the event up\n\t\t\t\tthis.trigger.apply(this, args);\n\t\t\t}.bind(this);\n\t\t\t\n\t\t\t// Add the listener\n\t\t\tthis[componentName].on(evt, handler);\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\n\t\t/**\n\t\t\tDiscontinue bubbling of a given event\n\t\t\t\n\t\t\t@param {String}\t\tcomponentName\tName of the component whose event to stop bubbling\n\t\t\t@param {String}\t\tevt\t\t\t\tName of event that was set to bubble\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\tunbubble: function(componentName, evt) {\n\t\t\tif (!this._bubbledEvts[componentName] || !this._bubbledEvts[componentName][evt]) {\n\t\t\t\tconsole.warn(\"%s: cannot discontinue bubbling of event '%s' for component '%s', event was not set for bubbling\", this.toString(), evt, componentName);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// Remove the listener\n\t\t\tthis[componentName].off(evt, this._bubbledEvts[componentName][evt]);\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t\tAdd an instance of another component as a sub-component.\n\t\t\t\n\t\t\t<code>this[subComponent.toString()]</code> is used to reference the sub-component:\n\t\t\t\n\t\t\t  <code>this.List.show();</code>\n\t\t\t\n\t\t\tYou can give a component an optional custom name as the second argument, then reference as such:\n\t\t\t\n\t\t\t <code>this.myCustomComponent.show();</code>\n\t\t\t\n\t\t\t@param {F.Component}\tcomponent\t\tInstance of component\n\t\t\t@param {String}\t\t\t[componentName]\tOptional custom name for this component\n\t\t\t\n\t\t\t@returns {F.Component}\tThe sub-component that was added\n\t\t*/\n\t\taddComponent: function(component, componentName) {\n\t\t\t// Get the name of the component\n\t\t\tif (componentName) {\n\t\t\t\t// Tell component its new name, if provided\n\t\t\t\tcomponentName = decapitalize(componentName);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Use lowercase of toString\n\t\t\t\tcomponentName = decapitalize(component.toString());\n\t\t\t}\n\t\t\t\n\t\t\t// Give component its new name\n\t\t\tcomponent.setName(componentName);\n\t\t\t\n\t\t\t// Store component\n\t\t\tthis[componentName] = this.components[componentName] = component;\n\t\t\n\t\t\t// Store this component as the parent\n\t\t\tcomponent.parent = this;\n\t\t\t\n\t\t\t// Show a sub-component when it shows one of it's sub-components\n\t\t\tthis.listenTo(component, 'component:shown', this._handleSubComponentShown);\n\t\t\t\n\t\t\treturn component;\n\t\t},\n\t\n\t\t/**\n\t\t\tRemove and destroy a sub-component\n\t\t\t\n\t\t\t@param {String}\t\tcomponentName\tComponent name\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\tremoveComponent: function(componentName) {\n\t\t\tvar component = this.components[componentName];\n\t\t\n\t\t\tif (component !== undefined) {\n\t\t\t\tthis.stopListening(component);\n\t\t\n\t\t\t\tdelete this[componentName];\n\t\t\t\tdelete this.components[componentName];\n\t\t\t\t\n\t\t\t\tif (typeof component.destruct === 'function')\n\t\t\t\t\tcomponent.destruct();\n\t\t\t}\n\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tRemove and destroy all sub-components\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\tremoveComponents: function() {\n\t\t\tfor (var componentName in this.components) {\n\t\t\t\tthis.removeComponent(componentName);\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\n\t\t/**\n\t\t\tHandles showing/hiding components in singly mode, triggering of events\n\t\t\t\n\t\t\t@param {Object}\t\tevt\t\tEvent object from component:shown\n\t\t\t@ignore\n\t\t*/\n\t\t_handleSubComponentShown: function(evt) {\n\t\t\tvar subComponent = this.components[evt.name];\n\n\t\t\tif (subComponent !== undefined) {\n\t\t\t\t// Hide current component(s) if the shown component isn't independent\n\t\t\t\tif (this.options.singly && !subComponent.options.independent) {\n\t\t\t\t\tthis.hideAllSubComponents([evt.name]);\n\t\t\t\t\t\n\t\t\t\t\t// Store currently visible subComponent\n\t\t\t\t\tthis.currentSubComponent = subComponent;\n\t\t\t\t}\n\n\t\t\t\tthis.trigger('subComponent:shown', {\n\t\t\t\t\tname: evt.name,\n\t\t\t\t\tcomponent: subComponent\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t\tShow this component and emit an event so parent components can show themselves.\n\t\t\t\n\t\t\t@param {Object}\t\t[options]\t\t\t\tOptions object\n\t\t\t@param {Boolean}\t[options.silent=false]\tIf true, events will not be triggered\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\tshow: function(options) {\n\t\t\toptions = options || {};\n\t\t\t\n\t\t\t// Debug output\n\t\t\tif (this.inDebugMode()) {\n\t\t\t\t// Don't show if already shown\n\t\t\t\tif (this.isVisible())\n\t\t\t\t\tconsole.log('%s: not showing self; already visible', this.toString());\n\t\t\t\telse\n\t\t\t\t\tconsole.log('%s: showing self', this.toString());\n\t\t\t}\n\t\t\n\t\t\tif (!options.silent) {\n\t\t\t\t// Always trigger event before we show ourself so others can hide/show\n\t\t\t\tthis.trigger('component:shown', {\n\t\t\t\t\tname: this.toString(),\n\t\t\t\t\tcomponent: this\n\t\t\t\t});\n\t\t\t}\n\t\t\n\t\t\t// Always call show on the view so it has a chance to re-render\n\t\t\tif (this.view) {\n\t\t\t\tthis.view.show();\n\t\t\t}\n\t\t\t\n\t\t\tthis.setupIfNotSetup();\n\t\t\t\n\t\t\tthis.options.visible = true;\n\t\n\t\t\treturn this;\n\t\t},\n\t\n\t\t/**\n\t\t\tHide this component\n\t\t\t\n\t\t\t@param {Object}\t\t[options]\t\t\t\t\t\tOptions object\n\t\t\t@param {Boolean}\t[options.silent=false]\t\t\tIf true, events will not be triggered\n\t\t\t@param {Boolean}\t[options.hideChildren=true]\t\tIf false, children will not be hidden automatically\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\thide: function(options) {\n\t\t\toptions = options || {};\n\t\t\t\n\t\t\tif (!this.isVisible())\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (this.inDebugMode()) {\n\t\t\t\tconsole.log('%s: hiding self', this.toString());\n\t\t\t}\n\t\t\t\n\t\t\t// Hide the view\n\t\t\tif (this.view)\n\t\t\t\tthis.view.hide();\n\t\t\t\n\t\t\tif (!options.silent) {\n\t\t\t\t// Trigger event after we hide ourself so we're out of the way before the next action\n\t\t\t\tthis.trigger('component:hidden', {\n\t\t\t\t\tname: this.toString(),\n\t\t\t\t\tcomponent: this\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Perform teardown if necessary\n\t\t\tthis.teardownIfSetup();\n\t\t\n\t\t\t// Hide children unless otherwise specified\n\t\t\tif (this.options.hideChildren !== false)\n\t\t\t\tthis.hideAllSubComponents();\n\t\t\n\t\t\tthis.options.visible = false;\n\t\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t\tCalls teardown() if necessary\n\t\t*/\n\t\tteardownIfSetup: function() {\n\t\t\t// Call teardown if we're setup\n\t\t\tif (this.options.isSetup && typeof this.teardown === 'function') {\n\t\t\t\tthis.teardown();\n\t\t\t\tthis.options.isSetup = false;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t\tCalls setup() if necessary\n\t\t*/\n\t\tsetupIfNotSetup: function() {\n\t\t\t// Call setup if we're not setup\n\t\t\tif (!this.options.isSetup && typeof this.setup === 'function') {\n\t\t\t\tthis.setup();\n\t\t\t\tthis.options.isSetup = true;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t\tCheck if this component, or F as a whole, is in debug mode and should output debug messages\n\t\t\t\n\t\t\t@returns {Boolean} Component or F is in debug mode\n\t\t*/\n\t\tinDebugMode: function() {\n\t\t\treturn this.options.debug || F.options.debug;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tCheck if this component is currently visible\n\t\t\t\n\t\t\t@returns {Boolean} Component is visible\n\t\t*/\n\t\tisVisible: function() {\n\t\t\treturn this.options.visible;\n\t\t},\n\n\t\t/**\n\t\t\tShow all sub-components\n\t\t\t\n\t\t\t@param {String[]}\t[except]\tList of component names not to show. These components will not be hidden if they are already shown\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\tshowAllSubComponents: function(except) {\n\t\t\texcept = _.isArray(except) ? except : false;\n\t\t\tfor (var componentName in this.components) {\n\t\t\t\tif (except && ~except.indexOf(componentName))\n\t\t\t\t\tcontinue;\n\t\t\t\tthis.components[componentName].show();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tHide all sub-components\n\t\t\t\n\t\t\t@param {String[]}\t[except]\tList of component names not to hide. These components will not be shown if they are already hidden\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\thideAllSubComponents: function(except) {\n\t\t\texcept = _.isArray(except) ? except : false;\n\t\t\tfor (var componentName in this.components) {\n\t\t\t\tif (except && ~except.indexOf(componentName))\n\t\t\t\t\tcontinue;\n\t\t\t\tthis.components[componentName].hide();\n\t\t\t}\n\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tSet a custom name for this component. Only useful before passing to {@link F.Component.addComponent}\n\t\t\t\n\t\t\t@param {String}\t\tcomponentName\tComponent name\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\tsetName: function(customName) {\n\t\t\t/**\n\t\t\t\tGet this component's name\n\t\t\t\t\n\t\t\t\t@returns {String}\tComponent's name; either a custom name given when added with {@link F.Component.addComponent}, or toString method or string from prototype\n\t\t\t*/\n\t\t\tthis.toString = function() {\n\t\t\t\treturn customName;\n\t\t\t};\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tSet properties of this instance from an options object, then remove the properties from the options object\n\t\t\t\n\t\t\t@param {Object}\t\toptions\t\tOptions object with many properties\n\t\t\t@param {String[]}\tprops\t\tProperties to copy from options object\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\tsetPropsFromOptions: function(options, props) {\n\t\t\t_.each(props, function(prop) {\n\t\t\t\t// Add the property to this instance, or use existing property if it's already there\n\t\t\t\tthis[prop] = options[prop] || this[prop];\n\t\t\t\t// Delete the property from the options object\n\t\t\t\tdelete options[prop];\n\t\t\t}.bind(this));\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tMerge options up the prototype chain. Options defined in the child class take precedence over those defined in the parent class.\n\t\t*/\n\t\tmergeOptions: function(options) {\n\t\t\t// Create a set of all options in the correct order\n\t\t\tvar optionSets = [];\n\t\t\tvar proto = this.constructor.prototype;\n\t\t\twhile (proto) {\n\t\t\t\tif (proto.hasOwnProperty('options')) {\n\t\t\t\t\toptionSets.unshift(proto.options);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tproto = proto.superPrototype;\n\t\t\t}\n\t\t\t\n\t\t\t// All options should end up merged into a new object to avoid overwriting prototype.options\n\t\t\toptionSets.unshift({});\n\t\t\t\n\t\t\t// Add in instance options\n\t\t\tif (options) {\n\t\t\t\toptionSets.push(options);\n\t\t\t}\n\n\t\t\t// Perform the merge and store the new options object on the instance\n\t\t\tthis.options = _.extend.apply(_, optionSets);\n\t\t}\n\n\t\t/**\n\t\t\tCalled when view rendering is complete\n\t\t\t\n\t\t\t@name handleRenderComplete\n\t\t\t@memberOf F.Component.prototype\n\t\t\t@function\n\t\t*/\n\t\t\n\t\t/**\n\t\t\tTriggered when a subcomponent is shown\n\t\t\t\n\t\t\t@name F.Component#subComponent:shown\n\t\t\t@event\n\t\t\t\n\t\t\t@param {Object}\t\t\tevt\t\t\t\t\tEvent object\n\t\t\t@param {String}\t\t\tevt.name\t\t\tThe subcomponent's name\n\t\t\t@param {F.Component}\tevt.component\t\tThe subcomponent\n\t\t*/\n\n\t\t/**\n\t\t\tTriggered when this component is shown\n\t\t\t\n\t\t\t@name F.Component#component:shown\n\t\t\t@event\n\t\t\t\n\t\t\t@param {Object}\t\t\tevt\t\t\t\t\tEvent object\n\t\t\t@param {String}\t\t\tevt.name\t\t\tThis component's name\n\t\t\t@param {F.Component}\tevt.component\t\tThis component\n\t\t*/\n\n\t\t/**\n\t\t\tTriggered when this component is hidden\n\t\t\t\n\t\t\t@name F.Component#component:hidden\n\t\t\t@event\n\t\t\t\n\t\t\t@param {Object}\t\t\tevt\t\t\t\t\tEvent object\n\t\t\t@param {String}\t\t\tevt.name\t\t\tThis component's name\n\t\t\t@param {F.Component}\tevt.component\t\tThis component\n\t\t*/\n\t});\n}());\n\nF.ModelComponent = new PseudoClass(/** @lends F.ModelComponent# */{\n\ttoString: 'ModelComponent',\n\textend: F.Component,\n\t/**\n\t\tA component that can load and render a model\n\t\t\n\t\t@constructs\n\t\t@extends F.Component\n\t\t\n\t\t@param {Object}\t\toptions\t\t\tOptions for this component\n\t\t@param {Object}\t\toptions.Model\tModel class this component will be operating on. Sets this.Model\n\t\t\n\t\t@property {Backbone.Model}\tModel\tThe model class to operate on. Not an instance of a model, but the model class itself.\n\t*/\n\tconstruct: function(options) {\n\t\tthis.Model = this.Model || options.Model;\n\t},\n\t\n\tModel: Backbone.Model,\n\t\n\t/**\n\t\tRefresh the model\n\t\t\n\t\t@param {Function}\tcallback\tCallback to call after successful refresh\n\t\t\n\t\t@returns {F.ModelComponent}\tthis, chainable\n\t*/\n\trefresh: function(callback) {\n\t\tthis.trigger('model:loading', {\n\t\t\tmodel: this.model\n\t\t});\n\n\t\tthis.model.fetch({\n\t\t\tsuccess: function(model, response) {\n\t\t\t\t// Allow handleLoadSuccess to cancel triggers\n\t\t\t\tvar trigger = true;\n\t\t\t\tif (typeof this.handleLoadSuccess === 'function')\n\t\t\t\t\ttrigger = (this.handleLoadSuccess(this.model, response) === false) ? false : true;\n\t\t\t\t\t\n\t\t\t\tif (trigger) {\n\t\t\t\t\t// Trigger model event\n\t\t\t\t\tthis.model.trigger('loaded');\n\t\t\t\t\n\t\t\t\t\t// Trigger component event\n\t\t\t\t\tthis.trigger('model:loaded', {\n\t\t\t\t\t\tmodel: this.model\n\t\t\t\t\t});\n\t\t\t\t\n\t\t\t\t\t// Call callback\n\t\t\t\t\tif (typeof callback === 'function')\n\t\t\t\t\t\tcallback.call(this, this.model);\n\t\t\t\t}\n\t\t\t}.bind(this),\n\t\t\terror: function(model, response) {\n\t\t\t\tconsole.warn('%s: Error loading model', this.toString());\n\t\t\t\t\n\t\t\t\tthis.trigger('model:loadFailed', {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\tresponse: response\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (typeof this.handleLoadError === 'function')\n\t\t\t\t\tthis.handleLoadError(this.model, response);\n\t\t\t}.bind(this)\n\t\t});\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t\tUse a different item model\n\t\t\n\t\t@param {Backbone.Model}\t\tmodel\tThe model to use\n\t\t\n\t\t@returns {F.ModelComponent}\tthis, chainable\n\t*/\n\t_setModel: function(model) {\n\t\tthis.model = model;\n\t\n\t\tif (this.model && this.model.off && this.view) {\n\t\t\tthis.view.setModel(model);\n\t\t}\n\n\t\t// Emit an event when the model changes\n\t\tif (this.model && this.model.on) {\n\t\t\tthis.listenTo(this.model, 'change', this._triggerChange);\n\t\t}\n\t\t\n\t\treturn this;\n\t},\n\n\t/** @ignore */\n\t_triggerChange: function() {\n\t\tthis.trigger('model:changed', {\n\t\t\tmodel: this.model\n\t\t});\n\t},\n\t\t\n\t/**\n\t\tFetch a model with the given ID\n\t\t\n\t\t@param {String}\t\titemId\t\tID of the item to fetch\n\t\t@param {Function}\t[callback]\tCallback to execute on successful fetch\n\t\t\n\t\t@returns {F.ModelComponent}\tthis, chainable\n\t*/\n\tfetch: function(itemId, callback) {\n\t\tvar data = {};\n\t\tif (itemId !== undefined) { // add the ID passed to the model data\n\t\t\tdata[this.Model.prototype.idAttribute] = itemId;\n\t\t}\n\n\t\tthis.trigger('model:loading', {\n\t\t\tmodel: this.model\n\t\t});\n\n\t\t// Create a blank model\n\t\tvar model = new this.Model(data);\n\t\n\t\t// Fetch model contents\n\t\tmodel.fetch({\n\t\t\t// TBD: add fetch options?\n\t\t\tsuccess: function(model, response) {\n\t\t\t\t// Assign the model to the view\n\t\t\t\tthis._setModel(model);\n\t\t\t\t\n\t\t\t\tvar trigger = this._handleLoadComplete(response);\n\t\t\t\tif (trigger) {\n\t\t\t\t\t// Only callback of handleLoadSuccess didn't return false\n\t\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\t\tcallback.call(this, this.model);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.bind(this),\n\t\t\terror: function(model, response) {\n\t\t\t\tconsole.warn('%s: Error loading model', this.toString());\n\t\t\t\t\n\t\t\t\tthis.trigger('model:loadFailed', {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\tresponse: response\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (typeof this.handleLoadError === 'function')\n\t\t\t\t\tthis.handleLoadError(this.model, response);\n\t\t\t}.bind(this)\n\t\t});\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/** @ignore */\n\t_handleLoadComplete: function(response) {\n\t\t// Allow handleLoadSuccess to cancel triggers\n\t\tvar trigger = true;\n\t\tif (typeof this.handleLoadSuccess === 'function') {\n\t\t\ttrigger = (this.handleLoadSuccess(this.model, response || { local: true }) === false) ? false : true;\n\t\t}\n\n\t\tif (trigger) {\n\t\t\t// Notify\n\t\t\tthis.trigger('model:loaded', {\n\t\t\t\tmodel: this.model\n\t\t\t});\n\t\t}\n\n\t\treturn trigger;\n\t},\n\n\t/**\n\t\tLoad a Backbone.Model directly or create a model from data\n\t\t\n\t\t@param {mixed}\tmodelOrData\t\tBackbone.Model to load or Object with data to create model from\n\t\t\n\t\t@returns {F.ModelComponent}\tthis, chainable\n\t*/\n\tload: function(modelOrData) {\n\t\tif (modelOrData instanceof Backbone.Model)\n\t\t\tthis._setModel(modelOrData);\n\t\telse\n\t\t\tthis._setModel(new this.Model(modelOrData));\n\t\t\n\t\tthis._handleLoadComplete();\n\n\t\treturn this;\n\t},\n\t\n\t/**\n\t\tSave a model to the server\n\t\t\n\t\t@param {Object}\t\tdata\t\tData to apply to model before performing save\n\t\t@param {Function}\tcallback\tCallback to execute on success/failure. Passed an error, the model, and the response from the server\n\t\t@param {Object}\t\toptions\t\tOptions to pass when calling model.save\n\t\t\n\t\t@returns {F.ModelComponent}\tthis, chainable\n\t*/\n\tsave: function(data, callback, options) {\n\t\tif (this.model) {\n\t\t\tif (this.inDebugMode())\n\t\t\t\tconsole.log('%s: Saving...', this.toString());\n\t\t\t\n\t\t\tthis.trigger('model:saving', {\n\t\t\t\tmodel: this.model\n\t\t\t});\n\t\t\t\n\t\t\tthis.model.save(data || {}, _.extend({\n\t\t\t\tsuccess: function(model, response) {\n\t\t\t\t\tif (this.inDebugMode())\n\t\t\t\t\t\tconsole.log('%s: Save successful', this.toString());\n\t\t\t\t\t\n\t\t\t\t\tif (typeof callback === 'function')\n\t\t\t\t\t\tcallback.call(this, null, this.model, response);\n\t\t\t\t\t\n\t\t\t\t\tif (typeof this.handleSaveSuccess === 'function')\n\t\t\t\t\t\tthis.handleSaveSuccess(this.model, response);\n\t\t\t\t\t\n\t\t\t\t\tthis.trigger('model:saved', {\n\t\t\t\t\t\tmodel: this.model,\n\t\t\t\t\t\tresponse: response\n\t\t\t\t\t});\n\t\t\t\t}.bind(this),\n\t\t\t\terror: function(model, response) {\n\t\t\t\t\tconsole.warn('%s: Error saving model', this.toString());\n\t\t\t\t\t\n\t\t\t\t\tif (typeof callback === 'function')\n\t\t\t\t\t\tcallback.call(this, new Error('Error saving model'), this.model, response);\n\t\t\t\t\t\n\t\t\t\t\tif (typeof this.handleSaveError === 'function')\n\t\t\t\t\t\tthis.handleSaveError(this.model, response);\n\t\t\t\t\t\t\n\t\t\t\t\tthis.trigger('model:saveFailed', {\n\t\t\t\t\t\tmodel: this.model,\n\t\t\t\t\t\tresponse: response\n\t\t\t\t\t});\n\t\t\t\t}.bind(this)\n\t\t\t}, options));\n\t\t}\n\t\telse {\n\t\t\tconsole.warn('%s: Cannot save, model is not truthy', this.toString());\n\t\t}\n\t\treturn this;\n\t},\n\t\n\t/**\n\t\tShow this component, optionally fetching an item by ID or assigning a new model before render\n\t\t\n\t\t@param {Object}\t\t\toptions\t\t\tShow options\n\t\t@param {String}\t\t\toptions.id\t\tID of model to fetch from the server before showing\n\t\t@param {Backbone.Model}\toptions.model\tModel to use directly (don't fetch)\n\t\t\n\t\t@returns {F.ModelComponent}\tthis, chainable\n\t*/\n\tshow: function(options) {\n\t\toptions = options || {};\n\t\t\n\t\tif (options.id) {\n\t\t\tif (this.inDebugMode()) {\n\t\t\t\tconsole.log('%s: fetching item with ID %s', this.toString(), options.id);\n\t\t\t}\n\t\t\t\n\t\t\t// Load the model by itemId, then show\n\t\t\tthis.fetch(options.id, function(model) {\n\t\t\t\tif (this.inDebugMode()) {\n\t\t\t\t\tconsole.log('%s: fetch complete!', this.toString());\n\t\t\t\t}\n\t\t\t\tthis.show({\n\t\t\t\t\tsilent: options.silent\n\t\t\t\t}); // pass nothing to show and the view will re-render\n\t\t\t});\n\t\t}\n\t\telse if (options.model) {\n\t\t\tif (this.inDebugMode()) {\n\t\t\t\tconsole.log('%s: showing with new model', this.toString(), options.model);\n\t\t\t}\n\t\t\t\n\t\t\tthis.load(options.model);\n\t\t\tthis.show({\n\t\t\t\tsilent: options.silent\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis._super.apply(this, arguments);\n\t\t}\n\t\t\t\n\t\treturn this;\n\t}\n\n\t/**\n\t\tCalled when a model has been loaded successfully\n\t\t\n\t\t@param {Backbone.Model}\tmodel\t\tThe model that was to loaded\n\t\t@param {Object}\t\t\tresponse\tThe response from Backbone\n\n\t\t@returns {Boolean}\tIf false is returned, events will not be triggered and the callback will not be called\n\n\t\t@name handleLoadSuccess\n\t\t@memberOf F.ModelComponent.prototype\n\t\t@function\n\t*/\n\n\t/**\n\t\tCalled when a model fails to load\n\t\t\n\t\t@param {Backbone.Model}\tmodel\t\tThe model that failed to load\n\t\t@param {Object}\t\t\tresponse\tThe response from Backbone\n\t\t\n\t\t@name handleLoadError\n\t\t@memberOf F.ModelComponent.prototype\n\t\t@function\n\t*/\n\t\n\t/**\n\t\tCalled when a model has been saved successfully\n\t\t\n\t\t@param {Backbone.Model}\tmodel\t\tThe model that was saved\n\t\t@param {Object}\t\t\tresponse\tThe response from Backbone\n\n\t\t@name handleSaveSuccess\n\t\t@memberOf F.ModelComponent.prototype\n\t\t@function\n\t*/\n\t\n\t/**\n\t\tCalled when a model fails to save\n\t\t\n\t\t@param {Backbone.Model}\tmodel\t\tThe model that failed to save\n\t\t@param {Object}\t\t\tresponse\tThe response from Backbone\n\n\t\t@name handleSaveError\n\t\t@memberOf F.ModelComponent.prototype\n\t\t@function\n\t*/\n\t\n\t/**\n\t\tTriggered when a model is saving\n\t\t\n\t\t@name F.ModelComponent#model:saving\n\t\t@event\n\t\t\n\t\t@param {Object}\t\t\tevt\t\t\tEvent object\n\t\t@param {Backbone.Model}\tevt.model\tThe model that was saved\n\t*/\n\t\n\t/**\n\t\tTriggered when save is unsuccessful\n\t\t\n\t\t@name F.ModelComponent#model:saveFailed\n\t\t@event\n\t\t\n\t\t@param {Object}\t\t\tevt\t\t\t\tEvent object\n\t\t@param {Backbone.Model}\tevt.model\t\tThe model that failed to save\n\t\t@param {Object}\t\t\tevt.response\tResponse from the server\n\t*/\n\t\n\t/**\n\t\tTriggered after a successful save\n\t\t\n\t\t@name F.ModelComponent#model:saved\n\t\t@event\n\t\t\n\t\t@param {Object}\t\t\tevt\t\t\t\tEvent object\n\t\t@param {Backbone.Model}\tevt.model\t\tThe model that was saved\n\t\t@param {Object}\t\t\tevt.response\tResponse from the server\n\t*/\n\t\n\t/**\n\t\tTriggered when the model is being loaded from the server\n\t\t\n\t\t@name F.ModelComponent#model:loading\n\t\t@event\n\t\t\t\n\t\t@param {Object}\t\t\tevt\t\t\tEvent object\n\t\t@param {Backbone.Model}\tevt.model\tThe model that was loaded\n\t*/\n\t \n\t/**\n\t\tTriggered when load is unsuccessful\n\t\t\n\t\t@name F.ModelComponent#model:loadFailed\n\t\t@event\n\t\t\n\t\t@param {Object}\t\t\tevt\t\t\t\tEvent object\n\t\t@param {Backbone.Model}\tevt.model\t\tThe model that failed to load\n\t\t@param {Object}\t\t\tevt.response\tResponse from the server\n\t*/\n\t\n\t/**\n\t\tTriggered when the model is loaded from the server or passed to load()\n\t\t\n\t\t@name F.ModelComponent#model:loaded\n\t\t@event\n\t\t\t\n\t\t@param {Object}\t\t\tevt\t\t\tEvent object\n\t\t@param {Backbone.Model}\tevt.model\tThe model that was loaded\n\t*/\n\n\t/**\n\t\tTriggered when the model is changed locally\n\n\t\t@name F.ModelComponent#model:changed\n\t\t@event\n\n\t\t@param {Object}\t\t\tevt\t\t\tEvent object\n\t\t@param {Backbone.Model}\tevt.model\tThe model that was loaded\n\t*/\n});\n\nF.CollectionComponent = new PseudoClass(/** @lends F.CollectionComponent# */{\n\ttoString: 'CollectionComponent',\n\textend: F.Component,\n\toptions: {\n\t\tdefaultParams: {}\n\t},\n\t\n\t/**\n\t\tA component that can load and render a collection\n\t\t\n\t\t@constructs\n\t\t@extends F.Component\n\t\t\n\t\t@param {Object}\t\toptions\t\tOptions for this component\n\t\t\n\t\t@property {Object}\t\t\t\t\tdefaultParams\tDefault parameters to send with fetches for this collection. Can be overridden at instantiation. Calls to <code>load(fetchParams)</code> will merge <code>fetchParams</code> with <code>defaultParams</code>\n\t\t@property {Backbone.Collection}\t\tcollection\t\tThe collection to use. Will be considered pre-loaded\n\t*/\n\tconstruct: function(options) {\n\t\t// Bind for use as listeners\n\t\tthis.bind('addModel');\n\t\tthis.bind('removeModel');\n\t\tthis.bind('render');\n\t\t\n\t\t// Use the passed in collection\n\t\tthis._useCollection(options.collection || new this.Collection());\n\t\t\n\t\t// We'll consider a collection loaded if it's passed at instantiation time\n\t\tthis.collectionLoaded = !!options.collection;\n\t},\n\t\n\tdestruct: function() {\n\t\tthis._releaseCollection();\n\t},\n\t\n\tCollection: Backbone.Collection,\n\t\n\t_useCollection: function(collection) {\n\t\t// Store collection\n\t\tthis.collection = collection;\n\t\t\n\t\t// Re-render when the collection is fetched, items are added or removed\n\t\tthis.listenTo(this.collection, 'add', this.addModel);\n\t\tthis.listenTo(this.collection, 'remove', this.removeModel);\n\t\tthis.listenTo(this.collection, 'loaded', this.render); // custom event we call after fetches\n\t\t// this.listenTo(this.collection, 'change', this.render); // Don't re-render on change! let the sub-views do that\n\t},\n\t\n\t_releaseCollection: function() {\n\t\t// Unbind events\n\t\tthis.stopListening(this.collection);\n\t\t\n\t\t// Remove reference to collection\n\t\tthis.collection = null;\n\t},\n\t\n\t/**\n\t\tRefresh this collection with the last parameters used\n\t\t\n\t\t@param {Function}\tcallback\tOptional callback to execute on successful fetch\n\t\t\n\t\t@returns {F.CollectionComponent}\tthis, chainable\n\t*/\n\trefresh: function(callback) {\n\t\t// Just fetch the collection with the current params\n\t\tthis.fetch(this.params, callback);\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t\tCallback called when model is added to collection\n\t*/\n\taddModel: function(model) {},\n\t\n\t/**\n\t\tCallback called when model is removed from collection\n\t*/\n\tremoveModel: function(model) {},\n\t\n\t/**\n\t\tClear the parameters from the last fetch. Useful when using refresh() on a filtered list.\n\t\t\n\t\t@returns {F.CollectionComponent}\tthis, chainable\n\t*/\n\tclearParams: function() {\n\t\tthis.params = {};\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t\tFetch the collection by fetching it from the server\n\t\t\n\t\t@param {Object}\t\t[fetchParams]\tParameters to pass when fetching\n\t\t@param {Function}\t[callback]\t\tCallback to execute on successful fetch\n\t\t\n\t\t@returns {F.CollectionComponent}\tthis, chainable\n\t*/\n\tfetch: function(fetchParams, callback) {\n\t\t// Combine new params, if any, with defaults and store, overwriting previous params\n\t\tif (fetchParams)\n\t\t\tthis.params = _.extend({}, this.options.defaultParams, fetchParams);\n\t\telse // Overwrite old params with defaults and send a request with only default params\n\t\t\tthis.params = _.extend({}, this.options.defaultParams);\n\t\t\n\t\tthis.trigger('collection:loading', this.collection);\n\t\t\n\t\t// Fetch collection contents\n\t\tthis.collection.fetch({\n\t\t\tdata: this.params,\n\t\t\tsuccess: function() {\n\t\t\t\tif (!this.collection) {\n\t\t\t\t\t// If the collection was released while it was being loaded, get out\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Collection event\n\t\t\t\tthis.collection.trigger('loaded');\n\n\t\t\t\t// Component event\n\t\t\t\tthis.trigger('collection:loaded', this.collection);\n\t\t\t\tthis.collectionLoaded = true;\n\t\t\t\t\n\t\t\t\tif (typeof callback === 'function')\n\t\t\t\t\tcallback.call(this, this.collection);\n\t\t\t}.bind(this)\n\t\t});\n\t\t\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t\tLoad a Backbone.Collection directly or create a collection from an array of data\n\t\t\n\t\t@param {Mixed}\tcollectionOrData\tBackbone.Collection to load or Array of Objects with data to create the collection from\n\t\t\n\t\t@returns {F.CollectionComponent}\tthis, chainable\n\t*/\n\tload: function(collectionOrData) {\n\t\tthis._releaseCollection();\n\n\t\tif (collectionOrData instanceof Backbone.Collection)\n\t\t\tthis._useCollection(collectionOrData);\n\t\telse\n\t\t\tthis._useCollection(new this.Collection(collectionOrData));\n\t\t\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t\tShow this component. Provide options.params to fetch with new parameters. The collection will be fetched before showing if it hasn't already\n\t\t\n\t\t@param {Object}\t\toptions\t\tPass fetch parameters with options.params\n\t\t\n\t\t@returns {F.CollectionComponent}\tthis, chainable\n\t*/\n\tshow: function(options) {\n\t\toptions = options || {};\n\t\tif (options.params) {\n\t\t\t// Fetch the collection from the server\n\t\t\tthis.fetch(options.params, function() {\n\t\t\t\tthis.show({\n\t\t\t\t\tsilent: options.silent\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\telse if (!this.collectionLoaded) {\n\t\t\t// Perform initial load\n\t\t\tthis.refresh(function() {\n\t\t\t\tthis.show({\n\t\t\t\t\tsilent: options.silent\n\t\t\t\t}); // show when we're fully loaded\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis._super.apply(this, arguments);\n\t\t}\n\t\t\n\t\treturn this;\n\t}\n\t\n\t\n\t/**\n\t\tTriggered when the collection is being loaded from the server\n\t\t\n\t\t@name F.CollectionComponent#collection:loading\n\t\t@event\n\t\t\n\t\t@param {Backbone.Collection}\tcollection\tThe collection that is being loaded\n\t*/\n\t\n\t/**\n\t\tTriggered when the collection is loaded from the server\n\t\t\n\t\t@name F.CollectionComponent#collection:loaded\n\t\t@event\n\t\t\n\t\t@param {Backbone.Collection}\tcollection\tThe collection that was loaded\n\t*/\n});\n\n(function() {\n\t\n\t/* Views\n\t*******************/\n\t// Available as F.FormComponent.prototype.View\n\tvar FormView = F.View.extend(/** @lends F.FormComponent.prototype.View# */{\n\t\ttagName: 'form',\n\t\tevents: {\n\t\t\t'submit': 'handleSubmit'\n\t\t}\n\t});\n\t\n\t\n\t/* Component\n\t*******************/\n\tF.FormComponent = new PseudoClass(/** @lends F.FormComponent# */{\n\t\ttoString: 'FormComponent',\n\t\textend: F.ModelComponent,\n\t\n\t\t/**\n\t\t\tA component that can display an add/edit form for a model and handle form submission and save events\n\t\t\t\n\t\t\t@constructs\n\t\t\t@extends F.ModelComponent\n\t\t\t\n\t\t\t@param {Object}\toptions\t\tOptions for this component and its view. Options not listed below will be passed to the view.\n\t\t\t\n\t\t\t@property {Backbone.Model}\tModel\t\tThe model class that the form will manipulate. Not an instance of the model, but the model class itself\n\t\t\t@property {Backbone.View}\tView\t\tThe view class that the form will be rendered to\n\t\t\t@property {Template}\t\tTemplate\tThe template that the form will be rendered with\n\t\t*/\n\t\tconstruct: function(options) {\n\t\t\t// Create a new edit view that responds to submit events\n\t\t\tthis.view = new this.View(_.extend({\n\t\t\t\tcomponent: this,\n\t\t\t\ttemplate: this.Template\n\t\t\t}, options));\n\t\t\n\t\t\t// Create a blank model\n\t\t\tthis.model = new this.Model();\n\t\t\t\n\t\t\tthis.bind('handleSubmit');\n\t\t},\n\n\t\tView: FormView,\n\t\n\t\tTemplate: null,\n\n\t\t/**\n\t\t\tClears the form by rendering it with a new, empty model\n\t\t\t\n\t\t\t@returns {F.Component}\tthis, chainable\n\t\t*/\n\t\tclear: function() {\n\t\t\t// Create a new model instead of resetting the old one\n\t\t\tthis._setModel(new this.Model());\n\n\t\t\t// Call the load success function\n\t\t\tvar trigger = true;\n\t\t\tif (typeof this.handleLoadSuccess === 'function')\n\t\t\t\tthis.handleLoadSuccess(this.model);\n\t\t\t\n\t\t\t// Render the view so it will be blank again\n\t\t\tthis.render();\n\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tBlurs focus from the form, mostly for iOS\n\t\t*/\n\t\tdoBlur: function() {\n\t\t\t// Blur focus to the submit button in order to hide keyboard on iOS\n\t\t\t// This won't work for every situation, such as forms that don't have submit buttons\n\t\t\tvar $button = this.view.$('[type=\"submit\"], button').filter(':visible').last().focus();\n\t\t\tsetTimeout(function() {\n\t\t\t\t$button.blur();\n\t\t\t}, 10);\n\t\t},\n\t\n\t\t/**\n\t\t\tHandles form submit events\n\t\t\t\n\t\t\t@param {Event}\tevt\t\tThe jQuery event object\n\t\t*/\n\t\thandleSubmit: function(evt) {\n\t\t\tthis.doBlur();\n\t\t\t\n\t\t\t// Since this is a DOM event handler, prevent form submission\n\t\t\tif (evt && evt.preventDefault)\n\t\t\t\tevt.preventDefault();\n\t\t\t\n\t\t\tthis.saveForm();\n\t\t},\n\t\t\n\t\t/**\n\t\t\tRead data from the form. Override this function customization of extracting your form data\n\t\t\t\n\t\t\t@returns {Object}\tData read from form\n\t\t*/\n\t\textractValuesFromForm: function() {\n\t\t\t// Get the data from the form fields\n\t\t\tvar $form = this.view.$el;\n\t\t\tif (this.view.el.tagName !== 'FORM')\n\t\t\t\t$form = this.view.$('form');\n\t\t\t\t\n\t\t\tvar fields = $form.filter(':not([data-serialize=\"false\"])').serializeArray();\n\t\t\t\n\t\t\t// Build a data object from fields\n\t\t\tvar data = {};\n\t\t\t_.each(fields, function(field) {\n\t\t\t\tF.set(data, field.name, field.value, true);\n\t\t\t});\n\t\t\t\n\t\t\treturn data;\n\t\t},\n\t\t\n\t\t/**\n\t\t\tRead the data from the form and store it in the model\n\t\t*/\n\t\tsetValuesFromForm: function() {\n\t\t\tthis.model.set(this.extractValuesFromForm());\n\t\t},\n\t\t\n\t\t/**\n\t\t\tRead the data from the form and perform the save\n\t\t\t\n\t\t\t@param {Function}\tcallback\tA callback to execute when the save is complete\n\t\t*/\n\t\tsaveForm: function(callback) {\n\t\t\t// Perform the save, passing our new, modified data\n\t\t\tthis.save(this.extractValuesFromForm(), callback);\n\t\t}\n\t\t\n\t});\n}());\n\n(function() {\n\t\n\t/* Views\n\t*******************/\n\t// Available as F.ListComponent.prototype.ListView\n\tvar ListView = F.View.extend({\n\t\ttagName: 'ul',\n\n\t\tinitialize: function(options) {\n\t\t\toptions = options || {};\n\n\t\t\t// Clumsy standard way of calling parent class' initialize method\n\t\t\tF.View.prototype.initialize.apply(this, arguments);\n\n\t\t\tthis.ItemView = options.ItemView || this.ItemView;\n\t\t\tthis.ItemTemplate = options.ItemTemplate || this.ItemTemplate;\n\t\t\t\n\t\t\t// Views array for subviews\n\t\t\tthis.subViews = [];\n\t\t\t\n\t\t\t// Bind addSuView permanently\n\t\t\tthis.addSubView = this.addSubView.bind(this);\n\t\t},\n\n\t\taddSubView: function(model) {\n\t\t\t// Do nothing if we haven't been rendered yet\n\t\t\tif (!this.rendered) return;\n\n\t\t\t// Create view\n\t\t\tvar view = new this.ItemView({\n\t\t\t\tmodel: model,\n\t\t\t\ttemplate: this.ItemTemplate,\n\t\t\t\tcomponent: this.component\n\t\t\t});\n\t\t\tview.render();\n\t\t\t\n\t\t\t// Add the list item to the List\n\t\t\tif (this.options.ListContainer)\n\t\t\t\tthis.$(this.options.ListContainer).append(view.el);\n\t\t\telse\n\t\t\t\tthis.$el.append(view.el);\n\t\t\t\n\t\t\t// Store the position in the views array\n\t\t\t// Don't store the actual view to prevent circular references\n\t\t\tview.$el.data('viewIndex', this.subViews.length);\n\t\t\t\n\t\t\t// Store in views array for removal later\n\t\t\tthis.subViews.push(view);\n\t\t},\n\t\t\n\t\tremove: function() {\n\t\t\tthis.removeSubViews();\n\t\t\t\n\t\t\tF.View.prototype.remove.call(this, arguments);\n\t\t},\n\n\t\tremoveSubView: function(modelOrViewIndex) {\n\t\t\t// Do nothing if we haven't been rendered yet\n\t\t\tif (!this.rendered) return;\n\n\t\t\tvar view = null;\n\t\t\tvar viewIndex = -1;\n\t\t\tif (typeof viewIndex !== 'Number') {\n\t\t\t\t_.some(this.subViews, function(tmpView, index) {\n\t\t\t\t\tif (tmpView && tmpView.model === modelOrViewIndex) {\n\t\t\t\t\t\tview = tmpView;\n\t\t\t\t\t\tviewIndex = index;\n\t\t\t\t\t}\n\t\t\t\t}.bind(this));\n\t\t\t}\n\t\t\telse // get from view index\n\t\t\t\tview = this.subViews[viewIndex];\n\t\t\t\t\n\t\t\tif (view) {\n\t\t\t\tview.remove();\n\t\t\t\tthis.subViews[viewIndex] = undefined;\n\t\t\t}\n\t\t},\n\t\t\n\t\tremoveSubViews: function() {\n\t\t\tif (this.subViews.length) {\n\t\t\t\t_.each(this.subViews, function(view) {\n\t\t\t\t\tif (view)\n\t\t\t\t\t\tview.remove();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tthis.subViews = [];\n\t\t\t}\n\t\t},\n\n\t\tshow: function() {\n\t\t\t// Render always, as the superClass method checks for a template and ListComponents don't have to have one\n\t\t\tthis.renderOnce();\n\n\t\t\t// Show the view\n\t\t\tthis.$el.show();\n\t\t},\n\n\t\trender: function() {\n\t\t\tif (this.inDebugMode()) {\n\t\t\t\tconsole.log('%s: rendering list view...', this.component && this.component.toString() || 'List view');\n\t\t\t}\n\t\t\t\n\t\t\tif (this.container && !$(this.el.parentNode).is(this.container))\n\t\t\t\t$(this.container).append(this.el);\n\t\t\t\n\n\t\t\tif (this.rendered === null) {\n\t\t\t\t// Render template\n\t\t\t\tif (this.template) {\n\t\t\t\t\tthis.$el.html(this.template({}));\n\t\t\t\t}\n\t\t\t\t// Store the last time this view was rendered\n\t\t\t\tthis.rendered = new Date().getTime();\n\t\t\t}\n\n\t\t\t// Remove previous views from the DOM\n\t\t\tthis.removeSubViews();\n\t\t\t\n\t\t\t// Add and render each list item\n\t\t\tthis.component.collection.each(this.addSubView);\n\t\t\t\n\t\t\tif (this.component.collection.isEmpty()) {\n\t\t\t\tvar EmptyView = this.ItemView;\n\t\t\t\tvar emptyTemplate;\n\t\t\t\t\n\t\t\t\t// Determine if we have searched\n\t\t\t\tif (!this.component.params || _.isEqual(this.component.params, this.component.options.defaultParams) && this.component.ListEmptyTemplate) {\n\t\t\t\t\temptyTemplate = this.component.ListEmptyTemplate;\n\t\t\t\t\tif (this.component.ListEmptyView)\n\t\t\t\t\t\tEmptyView = this.component.ListEmptyView;\n\t\t\t\t}\n\t\t\t\telse if (this.component.NoResultsTemplate) {\n\t\t\t\t\temptyTemplate = this.component.NoResultsTemplate;\n\t\t\t\t\tif (this.component.NoResultsView)\n\t\t\t\t\t\tEmptyView = this.component.NoResultsView;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Proceed if we have the appropriate template\n\t\t\t\tif (emptyTemplate) {\n\t\t\t\t\tvar view = new EmptyView({\n\t\t\t\t\t\ttemplate: emptyTemplate,\n\t\t\t\t\t\tcomponent: this.component,\n\t\t\t\t\t\tmodel: this.component.params\n\t\t\t\t\t}).render();\n\t\t\t\t\n\t\t\t\t\t// Add the empty template item to the list or specified list container\n\t\t\t\t\tif (this.options.ListContainer)\n\t\t\t\t\t\tthis.$(this.options.ListContainer).append(view.el);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.$el.append(view.el);\n\t\t\t\t\n\t\t\t\t\t// Store in views array for removal later\n\t\t\t\t\tthis.subViews.push(view);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Store the last time this view was rendered\n\t\t\tthis.rendered = new Date().getTime();\n\n\t\t\tthis.trigger('renderComplete');\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t});\n\n\t// Available as F.ListComponent.prototype.ItemView\n\tvar ItemView = F.View.extend({\n\t\ttagName: 'li',\n\t\tclassName: 'listItem'\n\t});\n\n\t/* Component\n\t*******************/\n\tF.ListComponent = new PseudoClass(/** @lends F.ListComponent# */{\n\t\ttoString: 'ListComponent',\n\t\textend: F.CollectionComponent,\n\t\n\t\t/**\n\t\t\tA component that can load and render a collection as a list\n\t\t\t\n\t\t\t@constructs\n\t\t\t@extends F.CollectionComponent\n\t\t\t\n\t\t\t@param {Object}\t\toptions\t\tOptions for this component and its view. Options not listed below will be passed to the view.\n\t\t\t\n\t\t\t@property {Backbone.Collection}\tCollection\t\tThe collection class this list will be rendered from\n\t\t\t@property {Mixed}\t\t\t\tListContainer\tThe DOM element or jQuery object list items should be appended to\n\t\t\t@property {Backbone.View}\t\tListView\t\tThe view class this list will be rendered with\n\t\t\t@property {Template}\t\t\tListTemplate\tThe template this list will be rendered with. Renders to a UL tag by default\n\t\t\t@property {Backbone.View}\t\tItemView\t\tThe view that individual items will be rendered with\n\t\t\t@property {Template}\t\t\tItemTemplate\tThe template that individual items will be rendered with\n\t\t*/\n\t\tconstruct: function(options) {\n\t\t\tthis.view = new this.ListView(_.extend({\n\t\t\t\tcomponent: this, // pass this as component so ItemView can trigger handleSelect if it likes\n\t\t\t\ttemplate: this.ListTemplate,\n\t\t\t\tItemView: this.ItemView,\n\t\t\t\tItemTemplate: this.ItemTemplate,\n\t\t\t\tListContainer: this.ListContainer,\n\t\t\t\tevents: _.extend({}, {\n\t\t\t\t\t'click li': 'handleSelect'\n\t\t\t\t}, this.ListView.prototype.events)\n\t\t\t}, options));\n\t\t\t\n\t\t\tthis.selectedItem = null;\n\t\t},\n\t\n\t\tCollection: Backbone.Collection, // Collection component expects to have prototype.Collection or options.Collection\n\t\n\t\t/**\n\t\t\tThe template to render when there are no results\n\t\t*/\n\t\tNoResultsTemplate: null,\n\n\t\t/**\n\t\t\tThe view to render when there are no results. Defaults to using ListView\n\t\t*/\n\t\tNoResultsView: null,\n\n\t\t/**\n\t\t\tThe view to render when the list is empty\n\t\t\t@todo give a default here\n\t\t*/\n\t\tListEmptyView: null,\n\n\t\t/**\n\t\t\tThe template to render when a list is empty. Rendered with ListEmptyView if defined, or ItemView otherwise\n\t\t\t@todo give a default here\n\t\t*/\n\t\tListEmptyTemplate: null,\n\n\t\tListTemplate: null,\n\t\tListView: ListView,\n\t\n\t\tItemTemplate: null,\n\t\tItemView: ItemView,\n\t\n\t\taddModel: function(model) {\n\t\t\t// Add a subview for this model\n\t\t\tthis.view.addSubView(model);\n\t\t},\n\t\t\n\t\tremoveModel: function(model) {\n\t\t\t// Remove subview for this model\n\t\t\tthis.view.removeSubView(model);\n\t\t},\n\n\t\t/**\n\t\t\tGet the model associated with a list item\n\t\t\t\n\t\t\t@param {Mixed}\tlistItem\tDOM element or jQuery Object to get model from\n\t\t\t\n\t\t\t@returns {Backbone.Model}\tThe model associated with the passed DOM element\n\t\t*/\n\t\tgetModelFromLi: function(listItem) {\n\t\t\tvar viewIndex = $(listItem).data('viewIndex');\n\t\t\treturn (viewIndex !== undefined && this.view.subViews[viewIndex] && this.view.subViews[viewIndex].model) || null;\n\t\t},\n\t\n\t\t/**\n\t\t\tGet the view associated with a list item\n\t\t\t\n\t\t\t@param {Node}\tlistItem\tDOM element  or jQuery Object to get model from\n\t\t\t\n\t\t\t@returns {Backbone.View}\tThe view associated with the passed DOM element\n\t\t */\n\t\tgetViewFromLi: function(listItem) {\n\t\t\treturn this.view.subViews[$(listItem).data('viewIndex')];\n\t\t},\n\t\t\n\t\t/**\n\t\t\tHandles item selection events\n\t\t\t\n\t\t\t@param {Event}\tevt\t\tThe jQuery event object\n\t\t*/\n\t\thandleSelect: function(evt) {\n\t\t\t// Get model from DOM el's data\n\t\t\tvar model = this.getModelFromLi(evt.currentTarget);\n\t\t\t\n\t\t\t// Only trigger if the target had a model\n\t\t\t// The empty views do not have a model\n\t\t\tif (model) {\n\t\t\t\t// Store ID of selected item\n\t\t\t\tthis.selectedItem = model.id;\n\t\t\n\t\t\t\tthis.trigger('list:itemSelected', {\n\t\t\t\t\tlistItem: $(evt.currentTarget),\n\t\t\t\t\tmodel: model\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t/**\n\t\t\tTriggered when and item in the list is selected by tapping or clicking\n\t\t\t\n\t\t\t@name F.ListComponent#list:itemSelected\n\t\t\t@event\n\t\t\t\n\t\t\t@param {Object}\t\t\tevt\t\t\t\tEvent object\n\t\t\t@param {jQuery}\t\t\tevt.listItem\tThe list item that was touched\n\t\t\t@param {Backbone.Model}\tevt.model\t\tThe model representing the item in the list\n\t\t*/\n\t});\n}());\n\n//# sourceMappingURL=F.min.js.map"]}